/*! @brief 二进制数据缓存对象，用于 io 读写的数据处理

 Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建：
 ```JavaScript
 var buf = new Buffer();
 ```
 */
interface bc_buffer
{
    /*! @brief 缓存对象构造函数
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34])
            console.log(buf.toString());
        }
    ```
     @param datas 初始化数据数组
     */
    Buffer(Array datas);

    /*! @brief 缓存对象构造函数
    ```JavaScript
    exports.hi = v => {
            var arr = new Uint16Array(2);
            arr[0] = 5000;
            arr[1] = 4000;
            var buf = new Buffer(arr.buffer);
            console.log(buf.hex());
        }

    ```
     @param datas 初始化数据数组
     */
    Buffer(ArrayBuffer datas);

    /*! @brief 缓存对象构造函数
    ```JavaScript
    exports.hi = v => {
            var arr = new Uint8Array(2);
            arr[0] = 50;
            arr[1] = 40;
            var buf = new Buffer(arr);
            console.log(buf.hex());

            var arr = new Uint16Array(2);
            arr[0] = 5000;
            arr[1] = 4000;
            var buf = new Buffer(arr);
            console.log(buf.hex());

            var arr = new Uint8Array([0x10, 0x20, 0x30]);
            var arr1 = new Uint8Array(arr.buffer, 1, 2);
            var buf = new Buffer(arr1);
            console.log(buf.hex());
        }
    ```
     @param datas 初始化数据数组
     */
    Buffer(TypedArray datas);

    /*! @brief 缓存对象构造函数
    ```JavaScript
    exports.hi = v => {
            var arr = new DataView(new ArrayBuffer(2));
            arr.setInt8(0, 0x10);
            arr.setInt8(1, 0x20);
            var buf = new Buffer(arr);
            console.log(buf.hex());
        }

    ```
     @param datas 初始化数据数组
     */
    Buffer(ArrayBufferView datas);

    /*! @brief 缓存对象构造函数
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(new Buffer("abcd"));
            console.log(buf.toString());
        }
    ```
     @param buffer 初始化Buffer对象
     */
    Buffer(Buffer buffer);

    /*! @brief 缓存对象构造函数
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("abcd","utf8");
            console.log(buf.toString());
        }
    ```
     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     */
    Buffer(String str, String codec = "utf8");

    /*! @brief 缓存对象构造函数
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(100);
            console.log(buf.length);
        }
    ```
     @param size 初始化缓冲区大小
     */
    Buffer(Integer size = 0);

    /*! @brief 检测给定的变量是否是 Buffer 对象
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("abcd");
            var str = "abcd"
            console.log(Buffer.isBuffer(buf));
            console.log(Buffer.isBuffer(str));
        }
    ```
     @param v 给定需要检测的变量
     @return 传入对象是否 Buffer 对象
    */
    static Boolean isBuffer(Value v);

    /*! @brief 通过其他 Buffer 创建 Buffer 对象
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = Buffer.from(new Buffer("abcd"), 1, 2);
            console.log(buf.toString());
        }
    ```
     @param buffer 给定 Buffer 类型变量用于创建 Buffer 对象
     @param byteOffset 指定数据起始位置，起始为 0
     @param length 指定数据长度，起始位 -1，表示剩余所有数据
     @return 返回 Buffer 实例
     */
    static Buffer from(Buffer buffer, Integer byteOffset = 0, Integer length = -1);

    /*! @brief 通过字符串创建 Buffer 对象
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = Buffer.from("abcd",0,2);
            console.log(buf.toString());
        }
    ```
     @param str 初始化字符串，字符串将以 utf-8 格式写入
     @param byteOffset 指定数据起始位置，起始为 0
     @param length 指定数据长度，起始位 -1，表示剩余所有数据
     @return 返回 Buffer 实例
     */
    static Buffer from(String str, Integer byteOffset = 0, Integer length = -1);

    /*! @brief 通过字符串创建 Buffer 对象
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("厉害！","utf8");
            console.log(buf.toString());
        }
    ```
     @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 返回 Buffer 实例
     */
    static Buffer from(String str, String codec = "utf8");

    /*! @brief 拼接多个缓存区中的数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = new Buffer("abcd");
            var buf2 = new Buffer("efg");
            var buf3 = new Buffer();
            var bufArray = [buf1];
            var bufRes = Buffer.concat(bufArray);
            console.log(bufRes.toString());

            bufArray = [buf1, buf2];
            bufRes = Buffer.concat(bufArray);
            console.log(bufRes.toString());

            bufRes = Buffer.concat(bufArray, 6);
            console.log(bufRes.toString());

            buf1 = new Buffer([0x31, 0x32, 0x33, 0x34]);
            buf2 = new Buffer([0x35, 0x36, 0x37, 0x38]);
            bufArray = [buf1, buf2];
            bufRes = Buffer.concat(bufArray);
            console.log(bufRes.toString());

            var buf2 = Buffer.concat([]);
            console.log(buf2.length);
        }

    ```
     @param buflist 待拼接的Buffer数组
     @param cutLength 截取多少个Buffer对象
     @return 拼接后产生的新 Buffer 对象
    */
    static Buffer concat(Array buflist, Integer cutLength = -1);

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = Buffer.alloc(10, 0,"utf8");    
            console.log(buf1.toString());
        }

    ```
     @param size 缓冲区的所需长度
     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 填充好的新 Buffer 对象
    */
    static Buffer alloc(Integer size, Integer fill = 0, String codec = "utf8");

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');
            var buf2 = Buffer.alloc(16, 'aGVsbG8gd29ybGQ=', 'base64');
            console.log(buf1.toString());
            console.log(buf2.toString());
        }

    ```
     @param size 缓冲区的所需长度
     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 填充好的新 Buffer 对象
    */
    static Buffer alloc(Integer size, String fill = "", String codec = "utf8");

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = Buffer.alloc(11, new Buffer('aGVsbG8gd29ybGQ='), 'base64');
            var buf2 = Buffer.alloc(16, new Buffer('aGVsbG8gd29ybGQ='), 'base64');
            console.log(buf1.toString());
            console.log(buf2.toString());
        }

    ```
     @param size 缓冲区的所需长度
     @param fill 预先填充新缓冲区的值，可使用 string/buffer/integer 值类型。 默认值：0
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 填充好的新 Buffer 对象
    */
    static Buffer alloc(Integer size, Buffer fill, String codec = "utf8");

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = Buffer.allocUnsafe(10);
            console.log(buf1.length);
        }
    ```
     @param size 缓冲区的所需长度
     @return 指定尺寸的新 Buffer 对象
    */
    static Buffer allocUnsafe(Integer size);

    /*! @brief 分配一个指定长度的新缓存区。如果大小为0，将创建一个零长度的缓存区。
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = Buffer.allocUnsafeSlow(10);
            console.log(buf1.length);
        }
    ```
     @param size 缓冲区的所需长度
     @return 指定尺寸的新 Buffer 对象
    */
    static Buffer allocUnsafeSlow(Integer size);

    /*! @brief 检测编码格式是否被支持
    实例:
    ```JavaScript
    exports.hi = v => {
            console.log(Buffer.isEncoding('utf8')); // true
            console.log(Buffer.isEncoding('utf-8')); // true
            console.log(Buffer.isEncoding('gbk')); // false
            console.log(Buffer.isEncoding('gb2312')); // false
            console.log(Buffer.isEncoding('hex')); // true
            console.log(Buffer.isEncoding('base64')); // true
            console.log(Buffer.isEncoding('jis')); // false
            console.log(Buffer.isEncoding('aaabbbccc')); // false
            console.log(Buffer.isEncoding('binary')); // false
            console.log(Buffer.isEncoding('latin1')); // false
            console.log(Buffer.isEncoding('big5')); // false
        }

    ```
     @param codec 待检测的编码格式
     @return 是否支持
     */
    static Boolean isEncoding(String codec);


    /*! @brief 获取缓存对象的尺寸 */
    readonly Integer length;

    /*! @brief 修改缓存对象尺寸
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("abcded");
            buf.resize(10);
            console.log(buf);
        }
    ```
     @param sz 指定新尺寸
     */
    resize(Integer sz);

    /*! @brief 在缓存对象尾部写入一组二进制数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34]);
            buf.append("abcd");
            buf.append([0x31, 0x32, 0x33, 0x34]);
            console.log(buf.toString());
        }
    ```
     @param data 初始化二进制数据
     */
    append(Buffer data);

    /*! @brief 在缓存对象尾部写入字符串，字符串将以 utf-8 格式写入
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34]);
            buf.append("3132", "hex");
            buf.append("MTIzNA==", "base64");
            console.log(buf.toString());
        }
    ```
     @param str 要写入的字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     */
    append(String str, String codec = "utf8");

    /*! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(10);
            buf.write("abcd", 0, 4,'utf8')
            console.log(buf.toString('utf8', 0, 4));
        }
    ```
     @param str 待写入的字符串
     @param offset 写入起始位置
     @param length 写入长度（单位字节，默认值-1），未指定时为待写入字符串的长度
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 写入的数据字节长度
     */
    Integer write(String str, Integer offset = 0, Integer length = -1, String codec = "utf8");

    /*! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据
    实例:
    ```JavaScript
    exports.hi = v => {
            buf = new Buffer(10);
            buf.write("MTIzNA==", 0, "base64");
            console.log(buf.toString("utf8", 0, 4));
        }
    ```
     @param str 待写入的字符串
     @param offset 写入起始位置
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 写入的数据字节长度
     */
    Integer write(String str, Integer offset = 0, String codec = "utf8");

    /*! @brief 向缓存对象写入指定字符串，字符串默认为utf-8，越界时只写入部分数据
    实例:
    ```JavaScript
    exports.hi = v => {
            buf = new Buffer(10);
            buf.write("MTIzNA==", "base64");
            console.log(buf.toString("utf8"));
        }
    ```
     @param str 待写入的字符串
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @return 写入的数据字节长度
     */
    Integer write(String str, String codec = "utf8");

    /*! @brief 为 Buffer 对象填充指定内容数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(10);
            buf.fill(1);
            console.log(buf.toString());
        }

    ```
     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer
     @param offset 填充起始位置
     @param end 填充终止位置
     @return 返回当前 Buffer 对象
     */
    Buffer fill(Integer v, Integer offset = 0, Integer end = -1);

    /*! @brief 为 Buffer 对象填充指定内容数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(10);
            buf.fill(new Buffer("abc"));
            console.log(buf.toString());
        }

    ```
     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer
     @param offset 填充起始位置
     @param end 填充终止位置
     @return 返回当前 Buffer 对象
     */
    Buffer fill(Buffer v, Integer offset = 0, Integer end = -1);

    /*! @brief 为 Buffer 对象填充指定内容数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(10);
            buf.fill("abc");
            console.log(buf.toString());
        }
    ```
     @param v 需要填充的数据，如果未指定 offset 和 end，将填充满整个 buffer
     @param offset 填充起始位置
     @param end 填充终止位置
     @return 返回当前 Buffer 对象
     */
    Buffer fill(String v, Integer offset = 0, Integer end = -1);

    /*! @brief 返回某个指定数据在 Buffer 中首次出现的位置
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34, 0x00]);
            console.log(buf.indexOf(0x33));
            console.log(buf.indexOf(0x00));
        }

    ```
     @param v 待查找数据，如果未指定 offset，默认从起始位开始
     @param offset 起始查找位置
     @return 返回查找到的位置，未找到返回 -1
     */
    Integer indexOf(Integer v, Integer offset = 0);

    /*! @brief 返回某个指定数据在 Buffer 中首次出现的位置
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("cacdbfcde");
            console.log(buf.indexOf("cd", 1));
        
        }

    ```
     @param v 待查找数据，如果未指定 offset，默认从起始位开始
     @param offset 起始查找位置
     @return 返回查找到的位置，未找到返回 -1
     */
    Integer indexOf(String v, Integer offset = 0);

    /*! @brief 比较缓存区的内容
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("abcd");
            console.log(buf.compare(new Buffer("abcd")));
            console.log(buf.compare(new Buffer("abc")));
            console.log(buf.compare(new Buffer("abcde")));
        }
    ```
     @param buf 待比较缓存对象
     @return 内容比较结果
     */
    Integer compare(Buffer buf);

    /*! @brief 从源缓存对象区域拷贝数据到目标缓存对象区域
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf1 = new Buffer([0x31, 0x32, 0x33]);
            var arr = [0x34, 0x35, 0x36];
    
            var buf2 = new Buffer(arr);
            var sz = buf1.copy(buf2);
            console.log(sz);
            console.log(buf2.toString());
        }

    ```
     @param targetBuffer 目标缓存对象
     @param targetStart 目标缓存对象开始拷贝字节位置，缺省为 0
     @param sourceStart 源缓存对象开始字节位置, 缺省为 0
     @param sourceEnd 源缓存对象结束字节位置, 缺省为 -1,表示源数据长度
     @return 拷贝的数据字节长度
     */
    Integer copy(Buffer targetBuffer, Integer targetStart = 0, Integer sourceStart = 0, Integer sourceEnd = -1);

    /*! @brief 返回一个新缓存对象，包含指定起始到缓存结尾的数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(10);
            buf.write("abcdefghih");
            console.log(buf.slice(8).toString());
        }
    ```
     @param start 指定范围的起始，缺省从头开始
     @return 返回新的缓存对象
     */
    Buffer slice(Integer start = 0);

    /*! @brief 返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer(10);
            buf.write("abcdefghih");
            console.log(buf.slice(0, 3).toString());
            console.log(buf.slice(0, 11).toString());
        }
    ```
     @param start 指定范围的起始
     @param end 指定范围的结束
     @return 返回新的缓存对象
     */
    Buffer slice(Integer start, Integer end);

    /*! @brief 把当前对象中的所有元素放入一个字符串
    实例:
    ```JavaScript
    exports.hi = v => {
            var a = new Buffer([192, 168, 0, 1]);
            console.log(a.join('.'));
        }
    ```
     @param separator 分割字符，缺省为 ","
     @return 返回生成的字符串
     */
    String join(String separator = ",");

    /*! @brief 返回一个新缓存对象，包含当前对象数据的倒序
    实例:
    ```JavaScript
    exports.hi = v => {
           var a = new Buffer("abcd");
           console.log(a.reverse().toString());
        }

    ```
     @return 返回新的缓存对象
     */
    Buffer reverse();

    /*! @brief 比较当前对象与给定的对象是否相等
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("abcd");
            console.log(buf.equals(new Buffer("abcd")));
            console.log(buf.equals(new Buffer("abc")));
        }
    ```
     @param expected 制定比较的目标对象
     @return 返回对象比较的结果
    */
    Boolean equals(object expected);

    /*! @brief 使用 16 进制编码缓存对象内容
     @return 返回编码字符串
     */
    String hex();

    /*! @brief 使用 base64 编码缓存对象内容
     @return 返回编码字符串
     */
    String base64();

    /*! @brief 返回全部二进制数据的数组
     @return 返回包含对象数据索引的迭代器
    */
    Iterator keys();

    /*! @brief 返回全部二进制数据的数组
     @return 返回包含对象数据值的迭代器
    */
    Iterator values();

    /*! @brief 返回包含对象数据 [index, byte] 对的迭代器
     @return [index, byte] 对的迭代器
    实例:
    ```JavaScript
    exports.hi = v => {
        const buf = Buffer.from('buffer');

        // Prints:
        //   [0, 98]
        //   [1, 117]
        //   [2, 102]
        //   [3, 102]
        //   [4, 101]
        //   [5, 114]
        for (const pair of buf.entries()) {
            console.log(pair);
        }
    }
    ```
    */
    Iterator entries();

    /*! @brief 返回全部二进制数据的数组
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("buffer");
            console.log(buf.toArray());
        }
    ```
     @return 返回包含对象数据的数组
    */
    Array toArray();

    /*! @brief 返回二进制数据的编码字符串
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34]);  
            console.log(buf.toString("utf8", 1, 3));
        }

    ```
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @param offset 读取起始位置
     @param end 读取终止位置
     @return 返回对象的字符串表示
    */
    String toString(String codec, Integer offset = 0, Integer end);

    /*! @brief 返回二进制数据的编码字符串
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34]);  
            console.log(buf.toString("utf8", 1));
            console.log(buf.toString("hex", 2));
            console.log(buf.toString("base64", 2));
        }

    ```
     @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
     @param offset 读取起始位置
     @return 返回对象的字符串表示
    */
    String toString(String codec, Integer offset = 0);

    /*! @brief 返回二进制数据的 utf8 编码字符串
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer([0x31, 0x32, 0x33, 0x34]);  
            console.log(buf.toString());      
        }

    ```
     @return 返回对象的字符串表示
    */
    String toString();

    /*! @brief 返回对象的 JSON 格式表示，一般返回对象定义的可读属性集合
    实例:
    ```JavaScript
    exports.hi = v => {
            var buf = new Buffer("buffer");
            console.log(buf.toJSON());
        }


    ```
     @return 返回对象的 JSON 格式表示
    */
    String toJSON();
};
